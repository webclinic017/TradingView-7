//@version=3
strategy(title="Min/Max RSI Strategy", pyramiding = 5, calc_on_order_fills=false, overlay=true, initial_capital=1, commission_type=strategy.commission.percent, commission_value=0.002)  
  
//////////////////////////////////////////////////////////////
// **************** Min/Max RSI Strategy - v0.5 *********************
// - Implemented checks if current price action in a well established trend - in this case need to open a trade in the direction of the trend
// - Implemented laddering when opening a position
// - Implemented trailing take profit
////////////////////////////////////////////////////////////// 

preOpenLongFlag = false
preOpenLongFlag := nz(preOpenLongFlag[1], false) 
preOpenLongFlag2 = false
preOpenLongFlag2 := nz(preOpenLongFlag2[1], false) 
preOpenShortFlag = false
preOpenShortFlag := nz(preOpenShortFlag[1], false)  
preOpenShortFlag2 = false
preOpenShortFlag2 := nz(preOpenShortFlag2[1], false)  
preCloseLongFlag = false
preCloseLongFlag := nz(preCloseLongFlag[1], false)   
preCloseShortFlag = false
preCloseShortFlag := nz(preCloseShortFlag[1], false) 
openPositionSize = 0.0 
openPositionSize := nz(openPositionSize[1], 0.0)
avgOpenPositionValue = 0.0 
avgOpenPositionValue := nz(avgOpenPositionValue[1], 0.0)
lastOpenPositionValue = 0.0 
lastOpenPositionValue := nz(lastOpenPositionValue[1], 0.0)
openPositionRSI = 0.0 
openPositionRSI := nz(openPositionRSI[1], 0.0)
ema200CrossValue = 0.0 
ema200CrossValue := nz(ema200CrossValue[1], 0.0) 
isBullishTrend = false
isBullishTrend := nz(isBullishTrend[1], false) 
isBearishTrend = false
isBearishTrend := nz(isBearishTrend[1], false) 
currentOpenPositionLadderingCount = 0.0 
currentOpenPositionLadderingCount := nz(currentOpenPositionLadderingCount[1], 0.0)
maxCurrentProfitPercent = 0.0 
maxCurrentProfitPercent := nz(maxCurrentProfitPercent[1], 0.0)
isTrailingTakeProfitActivated = false
isTrailingTakeProfitActivated := nz(isTrailingTakeProfitActivated[1], false)

commissionValue = input(title="Full Trade Commission Value, %", type=float, defval=0.4)
rsiLongOpenValue = input(title="RSI Long Open Value", type=integer, defval=28)
rsiTrendLongOpenValue = input(title="RSI Trend Long Open Value", type=integer, defval=34)
rsiLongCloseValue = input(title="RSI Long Close Value", type=integer, defval=69)
rsiShortOpenValue = input(title="RSI Short Open Value", type=integer, defval=72)
rsiTrendShortOpenValue = input(title="RSI Trend Short Open Value", type=integer, defval=66)
rsiShortCloseValue = input(title="RSI Short Close Value", type=integer, defval=31)
takeProfitStrategy = input(title="Take Profit Strategy", defval="1 - RSI Reached Overbought(Oversold) Zone", options=["1 - RSI Reached Overbought(Oversold) Zone"])
rsiTraversalNumberPips = input(title="RSI Traversal # Pips Value", type=float, defval=10.0)
stopLossEnabled = input(title="Stop-Loss Enabled", type=bool, defval=false)
stopLossValue = input(title="Stop-Loss Value, %", type=float, defval=3.65)
ema200ROCFlatTrendAllowance = input(title="EMA 200 ROC Level Flat Trend Allowance, %", type=float, defval=1.0)
debugSignalLine = input(title="Debug Signal Line", type=float, defval=7000)
openPosLadderingMaxNum = input(title="Laddering During Opening Position (Max Num)", type=integer, defval=4)
openPosLadderingThreshold = input(title="Difference Between Price And Last Open Price When Laddering, %", type=float, defval=1.5)
startTrailingTakeProfitTarget = input(title="Take Profit Trailing Start Target, %", type=float, defval=1.0)
trailingTakeProfitDistance = input(title="Trailing Take Profit Distance, %", type=float, defval=0.5)

openPosLadderingSize1 = 1
openPosLadderingSize2 = 1
openPosLadderingSize3 = 1
openPosLadderingSize4 = 1
openPosLadderingSize5 = 1

ema55 = ema(close, 55)
ema200 = ema(close, 200)
rsiVal = rsi(close, 14)

isAllowedShortTrading() =>
    iff(syminfo.prefix == "BITTREX", false, iff(syminfo.prefix == "BITFINEX", true, false))

isPreOpenLong() =>
    preOpenLongFlag == true
    
isPreOpenShort() =>
    preOpenShortFlag == true
    
isPreOpenLong2() =>
    preOpenLongFlag2 == true
    
isPreOpenShort2() =>
    preOpenShortFlag2 == true    
    
isPreCloseLong() =>
    preCloseLongFlag == true
    
isPreCloseShort() =>
    preCloseShortFlag == true
    
isPositionClosed() =>
    openPositionSize == 0

isLongPositionOpen() =>
    openPositionSize > 0

isShortPositionOpen() =>
    openPositionSize < 0
    
isRsiEnteredBelowLevel(level) =>
    rsiVal[1] > level and rsiVal <= level

isRsiEnteredAboveLevel(level) =>
    rsiVal[1] < level and rsiVal >= level 
    
hasReachedLadderingMaxNum() =>
    currentOpenPositionLadderingCount >= openPosLadderingMaxNum
    
isEligibleLadderingNewPosition(isLongPositionType) => 
    if(currentOpenPositionLadderingCount == 0)
        true
    else
        f1 = not hasReachedLadderingMaxNum()
        f2 = iff(isLongPositionType, close < lastOpenPositionValue and (lastOpenPositionValue - close)*100/lastOpenPositionValue >= openPosLadderingThreshold, close > lastOpenPositionValue and (close - lastOpenPositionValue)*100/lastOpenPositionValue >= openPosLadderingThreshold)
        f1 and f2
    
getOpenPosLadderingSizeByIndex(index) =>
    r = iff(index == 1, openPosLadderingSize1, 0)
    r := iff(index == 2, openPosLadderingSize2, r)
    r := iff(index == 3, openPosLadderingSize3, r)
    r := iff(index == 4, openPosLadderingSize4, r)
    r := iff(index == 5, openPosLadderingSize5, r)
    r
    
ladderNewOpenPositionValue(newPositionSize, price) =>
    (avgOpenPositionValue * abs(openPositionSize) + newPositionSize * price)/(abs(openPositionSize) + newPositionSize)
    
getActualStopLoss() =>
    stopLossValue - commissionValue 

calculateCurrentProfitPercent() =>
    iff(isLongPositionOpen(), (close - avgOpenPositionValue) * 100 / avgOpenPositionValue, iff(isShortPositionOpen(), (avgOpenPositionValue - close) * 100 / avgOpenPositionValue, 0.0))

isTrailingTakeProfitCloseCondition() =>
    c = calculateCurrentProfitPercent()
    iff(isTrailingTakeProfitActivated == true and c > 0 and c <= (maxCurrentProfitPercent - trailingTakeProfitDistance), true, false)

isStopLossCondition(isLongPositionType) =>
    if(isLongPositionType == true)
        iff(stopLossEnabled == true and hasReachedLadderingMaxNum() and close < avgOpenPositionValue and ((avgOpenPositionValue - close)*100/avgOpenPositionValue) >= getActualStopLoss(), true, false)
    else
        iff(stopLossEnabled == true and hasReachedLadderingMaxNum() and close > avgOpenPositionValue and ((close - avgOpenPositionValue)*100/avgOpenPositionValue) >= getActualStopLoss(), true, false)

isTakeProfitStrategy1() =>
    takeProfitStrategy == "1 - RSI Reached Overbought(Oversold) Zone"

hasReachedLongPositionTarget() =>
    f1 = iff(isTakeProfitStrategy1() and isPreCloseLong() and isRsiEnteredBelowLevel(rsiLongCloseValue), true, false)
    isTrailingTakeProfitCloseCondition() or isStopLossCondition(true) or f1

hasReachedShortPositionTarget() =>
    f1 = iff(isTakeProfitStrategy1() and isPreCloseShort() and isRsiEnteredAboveLevel(rsiShortCloseValue), true, false)
    isTrailingTakeProfitCloseCondition() or isStopLossCondition(false) or f1
    
isEmaCrossover(firstEMA, secondEMA) =>
    not na(firstEMA) and not na(secondEMA) and crossover(firstEMA, secondEMA)  

ema200CrossValue := iff(isEmaCrossover(ema200, ema55) or isEmaCrossover(ema55, ema200), ema200, ema200CrossValue)
if(ema200CrossValue != ema200CrossValue[1])
    isBullishTrend := false
    isBearishTrend := false

isBullishTrend := iff(not isBullishTrend and ema200 < ema55 and (ema200 - ema200CrossValue) * 100/ema200 >= ema200ROCFlatTrendAllowance, true, isBullishTrend)
isBearishTrend := iff(not isBearishTrend and ema200 > ema55 and (ema200CrossValue - ema200) * 100/ema200CrossValue >= ema200ROCFlatTrendAllowance, true, isBearishTrend)
isFlatTrend() =>
    not isBullishTrend and not isBearishTrend
    
// Determine if pre-open criteria is met and set the flag 
preOpenLongFlag := iff(isPositionClosed() and not isPreOpenLong() and (isFlatTrend() and isRsiEnteredBelowLevel(rsiLongOpenValue) or isBullishTrend and isRsiEnteredBelowLevel(rsiTrendLongOpenValue)), true, preOpenLongFlag) 
preOpenShortFlag := iff(isAllowedShortTrading() and isPositionClosed() and not isPreOpenShort() and (isFlatTrend() and isRsiEnteredAboveLevel(rsiShortOpenValue) or isBearishTrend and isRsiEnteredAboveLevel(rsiTrendShortOpenValue)), true, preOpenShortFlag)
// Calculate a second criteria to determine whether eligible to open a new position
preOpenLongFlag2 := iff(isPositionClosed() and not isPreOpenLong2() and isPreOpenLong() and (isFlatTrend() and isRsiEnteredAboveLevel(rsiLongOpenValue) or isBullishTrend and isRsiEnteredAboveLevel(rsiTrendLongOpenValue)), true, preOpenLongFlag2)
preOpenShortFlag2 := iff(isAllowedShortTrading() and isPositionClosed() and not isPreOpenShort2() and isPreOpenShort() and (isFlatTrend() and isRsiEnteredBelowLevel(rsiShortOpenValue) or isBearishTrend and isRsiEnteredBelowLevel(rsiTrendShortOpenValue)), true, preOpenShortFlag2) 
// Determine if eligible to ladder the new position
openLongPositionLadderingCriteria = isPreOpenLong2() and isEligibleLadderingNewPosition(true)
openShortPositionLadderingCriteria = isAllowedShortTrading() and isPreOpenShort2() and isEligibleLadderingNewPosition(false) 
signalOpenPositionLaddering = iff(openLongPositionLadderingCriteria == true, 1, iff(openShortPositionLadderingCriteria == true, -1, na)) 

ladderingPositionSize = 0.0
if(signalOpenPositionLaddering == 1 or signalOpenPositionLaddering == -1)
    openPositionRSI := rsiVal
    currentOpenPositionLadderingCount := currentOpenPositionLadderingCount + 1
    ladderingPositionSize := getOpenPosLadderingSizeByIndex(currentOpenPositionLadderingCount)
    avgOpenPositionValue := ladderNewOpenPositionValue(ladderingPositionSize, close)
    lastOpenPositionValue := close
    openPositionSize := openPositionSize + signalOpenPositionLaddering * ladderingPositionSize

currentProfitPercent = calculateCurrentProfitPercent()
isTrailingTakeProfitActivated := iff(not isTrailingTakeProfitActivated and currentProfitPercent >= startTrailingTakeProfitTarget, true, isTrailingTakeProfitActivated)
maxCurrentProfitPercent := iff(isTrailingTakeProfitActivated and currentProfitPercent > 0 and currentProfitPercent > maxCurrentProfitPercent, currentProfitPercent, maxCurrentProfitPercent)

//bbb = iff(isTrailingTakeProfitActivated, 1, 0)
//ccc = iff(isTrailingTakeProfitCloseCondition(), 1, 0)
//plotchar(0.00078+bbb*0.000005, color=#ffffffff, location=location.absolute, char='o')
//plotchar(0.00079+ccc*0.000005, color=#ff0000ff, location=location.absolute, char='o')

// Determine if pre-close criteria is met and set the flag
preCloseLongFlag := iff(isTakeProfitStrategy1() and isLongPositionOpen() and not isPreCloseLong() and isRsiEnteredAboveLevel(rsiLongCloseValue), true, preCloseLongFlag)
preCloseShortFlag := iff(isAllowedShortTrading() and isTakeProfitStrategy1() and isShortPositionOpen() and not isPreCloseShort() and isRsiEnteredBelowLevel(rsiShortCloseValue), true, preCloseShortFlag)
// Calculate signal to determine whether eligible to close existing position
closeLongPositionCriteria = isLongPositionOpen() and hasReachedLongPositionTarget()
closeShortPositionCriteria = isAllowedShortTrading() and isShortPositionOpen() and hasReachedShortPositionTarget()
signalClosePosition = iff(closeLongPositionCriteria == true, -1 , iff(closeShortPositionCriteria == true, 1, na))

strategy.entry("Long",  strategy.long,  qty = ladderingPositionSize, when = signalOpenPositionLaddering == 1, comment="Long")
strategy.entry("Short", strategy.short, qty = ladderingPositionSize, when = isAllowedShortTrading() and signalOpenPositionLaddering == -1, comment="Short")
strategy.close("Long",  when = signalClosePosition == -1)
strategy.close("Short", when = isAllowedShortTrading() and signalClosePosition == 1)

if(signalClosePosition == 1 or signalClosePosition == -1)
    preOpenLongFlag   := false 
    preOpenShortFlag  := false
    preOpenLongFlag2  := false
    preOpenShortFlag2 := false
    preCloseLongFlag  := false
    preCloseShortFlag := false
    openPositionRSI   := 0.0
    openPositionSize  := 0.0
    avgOpenPositionValue := 0.0
    lastOpenPositionValue := 0.0
    currentOpenPositionLadderingCount := 0.0
    maxCurrentProfitPercent := 0.0
    isTrailingTakeProfitActivated := false

 

